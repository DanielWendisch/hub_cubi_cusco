---
title: "QC_dashboard"
format: 
  dashboard:
    orientation: rows
  html:
    embed-resources: true
server: shiny

---

```{r setup}
#| warning: false
#| echo: false


library(readr)
library(dplyr)
library(tidyr)
#library(purrr)
#library(magrittr)
library(ggplot2)
library(Seurat)
library(tidyseurat)
library(BPCells)
#library(Azimuth)
#library(stringr)
library(ggridges)
library(forcats)
library(DT)
library(shiny)

#source("QC_dataset_setup_hub_01.R")

theme_1 <-   theme( plot.title = element_text(hjust = 0.5),
  plot.subtitle = element_text(hjust = 0.5))

```

```{r dataset loading}
#| echo: false

seurat_obj <- read_rds("intermediate_data/QC_dataset_setup_hub_01.R")
#plots <- readRDS "output/plots/hub_01_QC_plots.rds")



#plots
#######################################

plot_specs <- tribble(
  ~default_assay,   ~list_int,    ~meta_data_column,    ~plote_title,                                         ~order,                           ~subtitle,
  
  "RNA",    100,   "RNA_clusters_leiden_res0.8",  "seurat clusters",                                             NULL,          "background corrected counts (cellbender)",
  
  "RNA",    1,    "cell_line_cellranger",          "cell line (cellranger)",                                    NULL,      "background corrected counts (cellbender)",
  
  "RNA",    2,    "singlet_doublet_cellranger",    "singlets, doublets, no cell (hashtag call by cellranger)", "doublet",  "background corrected counts (cellbender)",
  
  "RNA",    3,    "cell_line_doublet_cellranger",  "cell line, singlets, doublets (hashtag call by cellranger)", NULL,    "background corrected counts (cellbender)",
  
  "uncorrected_RNA",    200,   "RNA_clusters_leiden_res0.8",  "seurat clusters",                                             NULL,          "background uncorrected counts",
  
  "uncorrected_RNA",    21,    "cell_line_cellranger",          "cell line (cellranger)",                                    NULL,     "background uncorrected counts",
  
  "uncorrected_RNA",    22,    "singlet_doublet_cellranger",    "singlets, doublets, no cell (hashtag call by cellranger)", "doublet",  "background uncorrected counts",
  
  "uncorrected_RNA",    23,    "cell_line_doublet_cellranger",  "cell line, singlets, doublets (hashtag call by cellranger)", NULL,    "background uncorrected counts"
  
  )


dim_plots_list <- list()
for (i in 1:nrow(plot_specs)) {
  DefaultAssay(seurat_obj) <- plot_specs$default_assay[i]
  
  
  dim_plots_list[[plot_specs$list_int[i]]] <- seurat_obj |>
  DimPlot(group.by = plot_specs$meta_data_column[i], order = plot_specs$order[[i]][1])  + 
  theme_1+
  ggtitle(label=plot_specs$plote_title[i], subtitle = plot_specs$subtitle[i])
  
}




DefaultAssay(seurat_obj) <- "RNA"
feature_plots <- list()
feature_plots[[1]] <- seurat_obj |> 
  FeaturePlot("cellbender_prob_to_be_cell", min.cutoff = 0.98, cols = c("red","black"))+
  theme_1+
  ggtitle(label="probability to be cell (cellbender)",
          subtitle = "background corrected counts)")


DefaultAssay(seurat_obj) <- "uncorrected_RNA"
feature_plots[[21]] <- seurat_obj |> 
  FeaturePlot("cellbender_prob_to_be_cell", min.cutoff = 0.98, cols = c("red","black"))+
  theme_1+
  ggtitle(label="probability to be cell (cellbender)",
          subtitle = "background corrected counts (cellbender)")


######-------------------------------

seurat_obj[["percent_mito"]] <- PercentageFeatureSet(object = seurat_obj, pattern = "^MT-")

mt_mad_tbl <- tibble(percent_mito = seurat_obj$percent_mito,
                     seurat_clusters= seurat_obj$seurat_clusters,
                      cell_line_doublet_cellranger= seurat_obj$cell_line_doublet_cellranger)

my_mad <- function(x, constant = 1) {
    median(abs(x - median(x, na.rm = TRUE)), na.rm = TRUE) * constant
}

mt_mad_tbl <- mt_mad_tbl |> group_by(cell_line_doublet_cellranger) |> mutate(MAD_percent_mito =my_mad(x=percent_mito)) |> mutate(dead_by_mad=ifelse(MAD_percent_mito>2.5, "dead","alive"))

seurat_obj$"dead" <- ifelse(pull(seurat_obj,percent_mito)>7.5,"dead","alive")


lower_nCount_RNA_thresh_quantile <- NA
lower_nCount_RNA_thresh <- 5000
upper_nCount_RNA_thresh_quantile<- NA
upper_nCount_RNA_thresh<- 22000
upper_mito_thresh_quantile<- NA
upper_mito_thresh <- 7.5
deleted_clusters<- c(11,12)

#Shiny
#####
# exp_data <- AggregateExpression(object =seurat_obj ,features =VariableFeatures(seurat_obj),group.by = "RNA_clusters_leiden_res0.8", assays = "RNA"  )
# exp_data <- as_tibble(t(exp_data[[1]]), rownames = "gene")
# 
# umap_centers <- as_tibble(seurat_obj@reductions$umap.RNA@cell.embeddings, rownames="gene") |>
#   mutate(cluster= seurat_obj$RNA_clusters_leiden_res0.8) |> group_by(cluster) |> 
#   summarize(center_umap_1=mean(umapRNA_1),
#          center_umap_2=mean(umapRNA_2))
#   
#   



# Calculate average expression for each gene in each cluster
avg_exp <- AggregateExpression(object =seurat_obj ,features =VariableFeatures(seurat_obj),group.by = "RNA_clusters_leiden_res0.8", assays = "RNA"  )[[1]] #|> as_tibble(rownames="gene")


# Function to compute z-scores
compute_z_score <- function(x) {
  (x - mean(x)) / sd(x)
}

# Apply z-score computation
avg_exp_z <- as.data.frame(t(apply(avg_exp, 1, compute_z_score)))

# Add gene names as a column for plotting
avg_exp_z$gene <- rownames(avg_exp_z)
avg_exp_z <- avg_exp_z %>% gather(key = "cluster", value = "z_score", -gene)


# Create the dot plot
cluster_zscore_data <- as_tibble(avg_exp_z) 
``` 




#  {.sidebar}

Thresholds applied to library:

  |                     | **lower**                              | **upper**                                    |
  |-----------------|------------------------|--------------------------------|
  | **nCount quantile** | `{r} lower_nCount_RNA_thresh_quantile` | `{r} upper_nCount_RNA_thresh_quantile`       |
  | **nCount RNA**      | `{r} lower_nCount_RNA_thresh`          | `{r} upper_nCount_RNA_thresh` |
  
  |                         | **lower** | **upper**                        |
  |-------------------------|-----------|----------------------------------|
  | **quantile**            | none      | `{r} upper_mito_thresh_quantile` |
  | **mitochondrial genes** | none      | `{r} upper_mito_thresh`          |
  
  |                      |                        |
  |----------------------|------------------------|
  | **deleted clusters** | `{r} deleted_clusters` |




# background correction

## Row {height="10%"}
### background corrected 
```{r}
#| title: Background corrected 
```

### without background correction 

```{r}
#| title: Without background correction 
```
## Row 

### Column {.tabset}

```{r}
#| title: seurat clusters
dim_plots_list[[100]]

```

```{r}
#| title: cell line
dim_plots_list[[3]]

```

```{r}
#| title: doublets, no cell
dim_plots_list[[2]]

```


```{r}
#| title: cell probability
feature_plots[[1]] 

```

```{r}
#| title: cluster sizes corrected

seurat_obj |> ggplot(aes(RNA_clusters_leiden_res0.8,fill=cell_line_doublet_cellranger))+
geom_bar()+
theme_minimal()
```

### Column {.tabset}

```{r}
#| title: seurat clusters
dim_plots_list[[200]]

```

```{r}
#| title: cell line
dim_plots_list[[23]]

```

```{r}
#| title: doublets, no cell
dim_plots_list[[22]]

```


```{r}
#| title: cell probability
feature_plots[[21]] 

```

```{r}
#| title: cluster sizes uncorrected

seurat_obj |> ggplot(aes(uncorrected_RNA_clusters_leiden_res0.8,fill=cell_line_doublet_cellranger))+geom_bar() +theme_minimal()

```
# QC metrics, after background correction
## Row {height="50%"}
### Dimplots {.tabset}
```{r}
#| title: dead cells
DefaultAssay(seurat_obj) <- "RNA"
seurat_obj |> DimPlot(group.by = "dead", reduction = "umap.RNA")
```
```{r}
#| title: dead cells
DefaultAssay(seurat_obj) <- "RNA"
seurat_obj |> FeaturePlot("percent_mito", reduction = "umap.RNA", max.cutoff= 10) + ggtitle("percent mitochondrial reads, with backgr. correc.")
```
```{r}
#| title: dead cells
DefaultAssay(seurat_obj) <- "uncorrected_RNA"
seurat_obj |> FeaturePlot("percent_mito", reduction = "umap.RNA", max.cutoff= 10) + ggtitle("percent mitochondrial reads, without backgr. correc.")
```

### Column

```{r}
#| title: doublet quantile freq

seurat_obj |> mutate(quantile_nCount_RNA = ntile(nCount_RNA,100)) |>  # Create groups in steps of 1000
  group_by(quantile_nCount_RNA,singlet_doublet_cellranger) |> 
  summarise(n = n(), .groups = 'drop', min_nCount_RNA=min(nCount_RNA)) |> 
  group_by(quantile_nCount_RNA) |> 
  mutate(freq=n/sum(n)) |> 
  ggplot(aes(min_nCount_RNA,freq,color=singlet_doublet_cellranger)) +
  geom_point()+
  geom_smooth()+
  geom_hline(yintercept = 0.1, color = "red", linetype = "dashed", size = 1)+
  geom_hline(yintercept = 0.9, color = "red", linetype = "dashed", size = 1)+
  geom_vline(xintercept = lower_nCount_RNA_thresh, color = "black", linetype = "dashed", size = 1)+
  geom_vline(xintercept = upper_nCount_RNA_thresh, color = "black", linetype = "dashed", size = 1)+
  scale_x_continuous(breaks = seq(0, max(seurat_obj$nCount_RNA, na.rm = TRUE), by = 2000))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
```
## Row {height="50%"}





### VlnPlots {.tabset}




```{r}
#| title: mt Violin, corrected

DefaultAssay(seurat_obj) <- "RNA"
seurat_obj |> VlnPlot("percent_mito")
```
```{r}
#| title: nCOuntRNA Violin, corrected

DefaultAssay(seurat_obj) <- "RNA"
seurat_obj |> VlnPlot("nCount_RNA")
```



```{r}
#| title: mt ridge
mt_mad_tbl |> ggplot(aes(percent_mito, cell_line_doublet_cellranger, fill = dead_by_mad)) + geom_density_ridges()+ theme(axis.text.x = element_text(angle = 45, hjust=1))+ xlim(0,20)
```

```{r}
#| title: nCountRNA


seurat_obj |> ggplot(aes(nCount_uncorrected_RNA,  fill = cell_line_doublet_cellranger))  +
  geom_histogram(bins = 200)+
  theme(axis.text.x = element_text(angle = 45, hjust=1))+
  facet_wrap(~cell_line_doublet_cellranger,ncol = 1 )+
  scale_x_continuous(breaks = seq(0, max(seurat_obj$nCount_RNA, na.rm = TRUE), by = 5000))+xlim(0,70000) +
  theme_minimal()


```







### Column {width="50%"}

```{r}
#| title: filtered object


filtered_seurat_obj <- seurat_obj |>
  filter(
    !(RNA_clusters_leiden_res0.8 %in% deleted_clusters) &
      nCount_RNA < upper_nCount_RNA_thresh &
      nCount_RNA > lower_nCount_RNA_thresh &
      percent_mito < upper_mito_thresh &
      singlet_doublet_cellranger == "singlet" & 
      cellbender_prob_to_be_cell> 0.99) 
    
filtered_seurat_obj |> DimPlot( reduction = "umap.RNA",label = T)

```

# gene level

## Row

### column {height="30%"}
```{r}
Idents(seurat_obj) <- "RNA_clusters_leiden_res0.8"
seurat_obj <- BuildClusterTree(seurat_obj, reduction=pca.RNA, slot="counts" )
aggregated <- AggregateExpression(seurat_obj,group.by="RNA_clusters_leiden_res0.8",  assays="RNA")

PlotClusterTree(seurat_obj, direction = "downwards")
```

### Column
```{r}
selectInput('chosen_genes', 'Gene', unique(cluster_zscore_data$gene)) 


```


## Row
### Column {widtht="60%"}
```{r}
#| title: Differantially ecpressed genes

de_genes_tbl <- read_rds("output/QC_cluster_markers_min.pct_0.4_logfc.threshold_0.25_max.cells.per.ident_300.rds") |> select(cluster, gene, p_val, avg_log2FC, pct.1, pct.2, p_val_adj) |> group_by(cluster) |> slice_min(p_val, n=50)

de_genes_tbl |> mutate(cluster=as_factor(cluster)) |>
  relocate(cluster) |> 
  datatable(
    colnames = c("cluster ","gene","pval", "avg_log2FC", "pct.1", "pct.2","p_val_adj"),
    filter = 'top',
    options = list(dom = 'tp',
     paging = TRUE,
    #   lengthMenu = c(5, 10, 25),
    #   pageLength = 10, 
      scrollY = TRUE
     )
  ) |> formatSignif(columns=c('p_val', 'avg_log2FC', 'p_val_adj'), digits=4 )
```
### Column

```{r}
cluster_zscore_data|> filter(gene %in% input$chosen_genes) |> 
ggplot( aes(x = cluster, y = gene)) +
  geom_point(aes(size = abs(z_score), color = z_score)) +
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
  theme_minimal() +
  labs(title = "Z-score Dot Plot of Average Gene Expression",
       x = "Cluster",
       y = "Gene",
       size = "Z-score magnitude",
       color = "Z-score")
```

