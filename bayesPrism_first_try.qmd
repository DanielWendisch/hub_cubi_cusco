---
title: "explore_bayes_prism"
format: html
editor: visual
---
```{r}
library(Seurat)
library(tidyverse)
library(tidyseurat)
library(BayesPrism)
library(readxl)
library(janitor)
library(patchwork)
#library(biomaRt) gives problems with "select"
library(InstaPrism)
```

```{r}
dataset_name <- "hub_01"
path_raw_data_file <-  "..\\..\\raw_data\\cubi_cusco"


obj <- read_rds(paste0("intermediate_data/", dataset_name, "_integrated_", ".rds"))
combined_bulk<- read.csv(paste(path_raw_data_file,"hub_01_02_bulk\\counts_table_hub_01_02.csv", sep = "\\"))
```
## meta data from 3p Sequencing, hub_01
```{r}
# meta data from 3p Sequencing

meta_data <- read_xlsx("../../raw_data/cubi_cusco/hub_01_02_bulk/a_HUB_model_characterisation_GEX_3pseq_transcription_profiling.xlsx")
names(meta_data) <- meta_data[1,]
meta_data <- meta_data[-1,]
meta_data <- meta_data |> clean_names()

meta_data <- meta_data |> select(name_4,name,name_2,experiment_identifier, tissue_type,rna_amount_ng,tapestation_qc_rin,perform_date_4,differentiation_duration, condition, treatment, treatment_duration)

colnames(meta_data) <- c("sample","cell_line","name_2","experiment_identifier", "tissue_type","rna_amount_ng","tapestation_qc_rin","perform_date_4","differentiation_duration", "condition", "treatment", "treatment_duration"            )

hub_01_meta_data <- meta_data |> filter(experiment_identifier=="HUB_01")
hub_01_bulk_library_names <- hub_01_meta_data |> pull(sample)
hub_01_bulk_library_names <- hub_01_bulk_library_names |> str_replace_all("-",".")
hub_01_meta_data
```

## meta data from polyA Sequencing, hub_01
```{r}

meta_data <- read_xlsx("../../raw_data/cubi_cusco/hub_01_02_bulk/a_HUB_model_characterisation_GEX_polyA_transcription_profiling.xlsx")
names(meta_data) <- meta_data[1,]
meta_data <- meta_data[-1,]
meta_data <- meta_data |> clean_names()

meta_data <- meta_data |> select(name_4,name,name_2,experiment_identifier, tissue_type,rna_amount_ng,tapestation_qc_rin,perform_date_4,differentiation_duration, condition, treatment, treatment_duration)

colnames(meta_data) <- c("sample","cell_line","name_2","experiment_identifier", "tissue_type","rna_amount_ng","tapestation_qc_rin","perform_date_4","differentiation_duration", "condition", "treatment", "treatment_duration"            )

hub_01_meta_data_polyA <- meta_data |> filter(experiment_identifier=="HUB_01")

hub_01_meta_data <- bind_rows(hub_01_meta_data_polyA,hub_01_meta_data)


hub_01_bulk_library_names <- hub_01_meta_data |> pull(sample)
hub_01_bulk_library_names <- hub_01_bulk_library_names |> str_replace_all("-",".")

hub_01_meta_data

```

## select matching bulk samples according to sodar meta data
```{r}
combined_bulk <- combined_bulk |>  select(-gene,-X)
bk.dat <- combined_bulk[,hub_01_bulk_library_names] |> as.matrix() |>  t()
colnames(bk.dat) <- combined_bulk |> pull(ensembl_gene_id)
bk.dat[1:8,1:5]

```

## chose cell state labels
```{r}

grouping <- "harmony_clusters_res0.1"
red <- "umap.mnn"
obj |> DimPlot(reduction = "umap.mnn", label = T, group.by = grouping)
ggsave(paste0(path_output_file, "hub_01_dimplot_",red, "_", grouping, ".png"))

obj |> DimPlot(reduction = "umap.mnn", label = T, group.by = "harmony_clusters_res0.4" )

obj <- obj |> mutate(m_e_class =case_when(
  harmony_clusters_res0.1 == 1 ~ "M",
  harmony_clusters_res0.1 == 2 ~ "M",
  harmony_clusters_res0.1 == 3 ~ "M",
  harmony_clusters_res0.1 == 4 ~ "M",
  harmony_clusters_res0.1 == 0 ~ "E"
  
))

FeaturePlot(obj, features = "EPCAM", reduction = "umap.mnn", label = T)
ggsave(paste0(path_output_file, "hub_01_feature_","EPCAM" ,".png"))


grouping <- "m_e_class"
red <- "umap.mnn"
obj |> DimPlot(reduction = red, label = T, group.by = grouping) + coord_fixed()
ggsave(paste0(path_output_file, "hub_01_dimplot_",red, "_", grouping, ".png"))

obj |> DimPlot(reduction = "umap.mnn", label = T, group.by = "m_e_class" )
ggsave(paste0(path_output_file, "hub_01_dimplot_",red, "_", grouping, ".png"))

cell.type.labels <- obj |> pull(m_e_class)
table(cell.type.labels)
```
## chose cell state labels
```{r}
cell.state.labels <- obj |> pull(harmony_clusters_res0.4) |> as.character()
table(cell.state.labels)
```

```{r}
table(cbind.data.frame(cell.state.labels, cell.type.labels))
```

## prepare single cell data for reference
```{r}
sc.dat <- obj@assays$uncorrected_RNA@layers$counts |> as.matrix() 

# Define your list of gene names
gene_names <- rownames(obj)

# Use the Ensembl database for humans (change the dataset for different species)
ensembl <- biomaRt::useMart("ensembl", dataset = "hsapiens_gene_ensembl")

# Query Ensembl to get the Ensembl Gene IDs for your list of gene names
gene_mapping <- biomaRt::getBM(
  filters = "hgnc_symbol",    # Filter based on HGNC gene symbols
  attributes = c("hgnc_symbol", "ensembl_gene_id"),  # Retrieve HGNC symbols and Ensembl Gene IDs
  values = gene_names,        # The list of gene names to map
  mart = ensembl
)

gene_vec <- gene_mapping$ensembl_gene_id
names(gene_vec)<- gene_mapping$hgnc_symbol
ensgs <- gene_names[grepl("ENSG", gene_names)]
hpc<- gene_names[!grepl("ENSG", gene_names)]

hpc_to_ensgs <- gene_vec[hpc]

colnames(sc.dat) <- colnames(obj)

colnames(sc.dat) <- colnames(obj)
rownames(sc.dat) <- rownames(obj)
sc.dat <- sc.dat[c(ensgs,hpc),]
rownames(sc.dat) <- c(ensgs, hpc_to_ensgs)

sc.dat <- sc.dat |> t()

sc.dat[1:10,1:10]
```




```{r}
genes_keep_2 <- intersect(colnames(sc.dat),colnames(bk.dat))

bk.dat <- bk.dat[,genes_keep_2]
sc.dat <- sc.dat[,genes_keep_2]

dim(bk.dat)
dim(sc.dat)
```

```{r}
png( "output/hub_01_fisrt_BayesPrism_plot.cor.phi.png")
 plot.cor.phi (input=sc.dat,
                         input.labels=cell.state.labels,
                         title="cell state correlation",
                         #specify pdf.prefix if need to output to pdf
                         #pdf.prefix="gbm.cor.cs", 
                         cexRow=0.2, cexCol=0.2,
                         margins=c(2,2)) 


ggsave(plot = p,"output/hub_01_fisrt_BayesPrism_plot.cor.phi.png")
```

```{r}
plot.cor.phi (input=sc.dat, 
                         input.labels=cell.type.labels, 
                         title="cell type correlation",
                         #specify pdf.prefix if need to output to pdf
                         #pdf.prefix="gbm.cor.ct",
                         cexRow=0.5, cexCol=0.5,
                         )
ggsave(plot = p,"output/hub_01_fisrt_BayesPrism_plot.cor.phi_m_e.png")
```

```{r}
sc.stat <- plot.scRNA.outlier(
  input=sc.dat, #make sure the colnames are gene symbol or ENSMEBL ID 
  cell.type.labels=cell.type.labels,
  species="hs", #currently only human(hs) and mouse(mm) annotations are supported
  return.raw=TRUE #return the data used for plotting. 
  #pdf.prefix="gbm.sc.stat" specify pdf.prefix if need to output to pdf
)
```

```{r}
head(sc.stat)
```


```{r}
bk.stat <- plot.bulk.outlier(
  bulk.input=bk.dat,#make sure the colnames are gene symbol or ENSMEBL ID 
    sc.input=sc.dat, #make sure the colnames are gene symbol or ENSMEBL ID 
  cell.type.labels=cell.type.labels,
  species="hs", #currently only human(hs) and mouse(mm) annotations are supported
  return.raw=TRUE
  #pdf.prefix="gbm.bk.stat" specify pdf.prefix if need to output to pdf
)
```
```{r}
sc.dat.filtered <- cleanup.genes (input=sc.dat,
                                  input.type="count.matrix",
                                    species="hs", 
                                    gene.group=c( "Rb","Mrp","other_Rb","chrM","MALAT1","chrX","chrY") ,
                                    exp.cells=5)
```

```{r}
plot.bulk.vs.sc (sc.input = sc.dat.filtered,
                            bulk.input = bk.dat
                            #pdf.prefix="gbm.bk.vs.sc" specify pdf.prefix if need to output to pdf
)
```

```{r}
sc.dat.filtered.pc <-  select.gene.type (sc.dat.filtered,
                                        gene.type = "protein_coding")
```

```{r}
diff.exp.stat <- get.exp.stat(sc.dat=sc.dat[,colSums(sc.dat>0)>3],# filter genes to reduce memory use
                                          cell.type.labels=cell.type.labels,
                                          cell.state.labels=cell.state.labels,
                                          #psuedo.count=0.1, #a numeric value used for log2 transformation. =0.1 for 10x data, =10 for smart-seq. Default=0.1.
                                          cell.count.cutoff=50, # a numeric value to exclude cell state with number of cells fewer than this value for t test. Default=50.
                                          n.cores=1 #number of threads
                                          )
```

```{r}
sc.dat.filtered.pc.sig <- select.marker (sc.dat=sc.dat.filtered.pc,
                                                  stat=diff.exp.stat,
                                                  pval.max=0.01,
                                                  lfc.min=0.1)
write_rds(sc.dat.filtered.pc.sig,"intermediate_data/BayesPrsim_hub_01_sc.dat.filtered.pc.sig.rds")

```

```{r}
myPrism <- new.prism(
  reference=sc.dat.filtered.pc, 
  mixture=bk.dat,
  input.type="count.matrix", 
  cell.type.labels = cell.type.labels, 
  cell.state.labels = cell.state.labels,
  key=NULL,
  outlier.cut=0.01,
    outlier.fraction=0.1,
)


```
```{r}
install.packages("Biobase")
library(Biobase)
library(BisqueRNA)
data("sim.data")
sc.eset = sim.data$sc.eset
scExpr = exprs(sc.eset)
cell_type_labels = pData(sc.eset)$cellType
refPhi_obj = refPrepare(sc_Expr = scExpr, cell.type.labels = cell_type_labels, cell.state.labels = cell_type_labels)

```

```{r}
# # bulk input with genes in rows and samples in columns; this example data is from ovarian cancer
# bulk_expr = read.csv(system.file('extdata','example_bulk.csv',package = 'InstaPrism')) 
# 
# # load built-in reference; choose a reference that matches the tumor type of the bulk input
# OV_ref = InstaPrism_reference('OV') 
# 
# ctl <-  cell.type.labels
# csl <-  cell.state.labels
# 
# refPhi_obj = refPrepare(sc_Expr = sc.dat.filtered.pc, cell.type.labels = ctl, cell.state.labels = csl)
# 
# refPrepare(sc_Expr = sc.dat.filtered.pc, cell.type.labels = cell.type.labels, cell.state.labels = cell.state.labels)
# 
# # deconvolution with InstaPrism
# deconv_res = InstaPrism(bulk_Expr = as.data.frame(bk.dat),
#                         refPhi_cs = sc.dat.filtered.pc)
# 
# # The deconvoled cell type fraction is now accessible with
# estimated_frac = t(deconv_res@Post.ini.ct@theta)
# head(estimated_frac)
# 
# # InstaPrism also returns the deconvolved gene expression Z
# Z = get_Z_array(deconv_res) # a sample by gene by cell-type array
# head(Z[,1:10,'malignant'])
```

```{r}
library(InstaPrism)
InstaPrism.res.initial = InstaPrism(input_type = 'prism',prismObj = myPrism,n.core = 16)

proportions <- InstaPrism.res.initial@Post.ini.cs@theta |> as_tibble(rownames="cluster")

```


```{r}

```

```{r}
bp.res <- run.prism(prism = myPrism, n.cores=8)

library(tidyverse)
write_rds(bp.res, "intermediate_data/bp.res_hub_01_3pseq_first_exploration.rds")
```
```{r}
slotNames(bp.res)
```

```{r}
theta <- get.fraction (bp=bp.res,
            which.theta="final",
            state.or.type="type")

theta_state <- get.fraction (bp=bp.res,
            which.theta="final",
            state.or.type="state")
```

```{r}
theta
```

```{r}
sc_group_counts <- obj |> group_by(cell_line_cellranger, m_e_class) |> summarise(n=n())|> mutate(fraction=n/sum(n))
sc_group_counts


```
```{r}
theta_tbl <- as_tibble(theta,rownames = "sample")

theta_tbl <- hub_01_meta_data |>
  mutate(sample=str_replace_all(sample,"-",".")) |> 
  mutate(name=paste0("hIO_",cell_line)) |> 
  select(sample,name) |> left_join(theta_tbl)
```
```{r}
proportions |>
  
  pivot_longer(GEX.BLK_0084_polyA:GEX.BLK_0086_3pseq,
               names_to = "sample" ,
               values_to = "fraction") |> 
  left_join(hub_01_meta_data) |> 
  
  ggplot(aes(sample,fraction, fill = cluster))+
  geom_col()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
  
ggsave("output/hub_01_BayesPrsim.barplot.png")  
```


```{r}
hub_01_meta_data <- hub_01_meta_data  |> 
  mutate(sample=str_replace_all(sample,"-","."))|>
  separate(name_2,into = "processing") |> 
  mutate(processing=paste0(processing,
                           "_",
                           str_remove_all(sample, "GEX-.BLK_")
                           ))


(theta_tbl |>
    left_join(hub_01_meta_data) |> 
    pivot_longer(cols = M:E, names_to = "m_e_class" , values_to = "fraction")|>
   ggplot(aes(processing,fraction, fill = m_e_class)) +
  geom_col() +
    facet_grid(~name,scales = "free_x", space = "free_x")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
)/
(sc_group_counts |> ggplot(aes(cell_line_cellranger,fraction, fill = m_e_class)) +
  geom_col())
  
```


```{r}
library(MuSiC)
library(TOAST)
library(SummarizedExperiment)
library(SingleCellExperiment)
obj@assays$RNA$counts <- as.matrix(obj@assays$RNA$counts)

sc.dat
meta_data_arranged <- obj@meta.data
meta_data_arranged <- obj@meta.data[rownames(sc.dat),]


sce<- SingleCellExperiment(assays = list(counts = t(sc.dat.filtered.pc)), colData=meta_data_arranged)



  
#obj_sce <- as.SingleCellExperiment(obj)

Est.prop.GSE50244 = music_prop(bulk.mtx = t(bk.dat),
                               sc.sce = sce,
                               clusters = 'm_e_class',
                               samples = 'cell_line_cellranger',
                               verbose = F)

intersect(colnames(bk.dat,))

 prob_music <- Est.prop.GSE50244$Est.prop.allgene |> as_tibble(rownames="sample")

prob_music |>
  left_join(hub_01_meta_data |> mutate(sample=str_replace_all(sample, "-", "."))) |> 
  pivot_longer(cols = M:E, names_to = "m_e_class" , values_to = "fraction") |>
   ggplot(aes(sample,fraction, fill = m_e_class)) +  
  geom_col() +
  ggtitle("MuSiC")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    facet_grid(~name_2,scales = "free_x", space = "free_x")


```
prob_music

```{r}
sc.dat[1:10,1:10]
sc.dat |> dim()
meta_data_arranged |> dim()
```
